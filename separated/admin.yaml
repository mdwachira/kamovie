version: ${COMPOSE_VERSION}

networks:
  streaming:
    name: media_network
    external: true
  download:
    name: torrent_network
    external: true
  proxy:
    name: proxy_network
    external: true

services:
  portainer:
    image: "docker.io/portainer/portainer-ce"
    container_name: portainer
    hostname: portainer.local
    restart: unless-stopped
    networks:
      - proxy
    # ports:
    #   - '9000:9000'
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ${DOCKER_DIR}/admin_stack/portainer/data:/data
    labels:
     - "traefik.enable=true"
     - "traefik.http.routers.portainer.rule=Host(`dock.${DOMAIN}`)"
     - "traefik.http.routers.portainer.tls.certresolver=letsencrypt"
     - "traefik.http.services.portainer.loadbalancer.server.port=9000"

  dockge:
    image: "docker.io/louislam/dockge:latest"
    container_name: dockge
    hostname: dockge.local
    restart: unless-stopped
    networks:
      - proxy
    # ports:
    #   - '5001:5001'
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ${DOCKER_DIR}/admin_stack/dockge/data:/app/data
      - ${DOCKER_DIR}:/home/mdwachira/docker
    environment:
      - DOCKGE_STACKS_DIR=/home/mdwachira/docker
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.dockge.rule=Host(`dge.${DOMAIN}`)"
      - "traefik.http.routers.dockge.tls.certresolver=letsencrypt"
      - "traefik.http.services.dockge.loadbalancer.server.port=5001"

  homarr:
    image: "ghcr.io/ajnart/homarr"
    container_name: homarr
    hostname: home.local
    volumes:
      - ${DOCKER_DIR}/admin_stack/homarr/configs:/app/data/configs
      - ${DOCKER_DIR}/admin_stack/homarr/data:/data
      - ${DOCKER_DIR}/admin_stack/homarr/icons:/app/public/icons
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - proxy
      - download
      - streaming
    # ports:
    #   - '8190:7575'
    environment:
      - PGID=${ENV_PGID}
      - TZ=${TIMEZONE}
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.homarr.rule=Host(`hmr.${DOMAIN}`)"
      - "traefik.http.routers.homarr.tls.certresolver=letsencrypt"
      - "traefik.http.services.homarr.loadbalancer.server.port=7575"
    restart: unless-stopped

  code-server:
    image: "lscr.io/linuxserver/code-server"
    container_name: code-server
    hostname: code.local
    environment:
      - PUID=${ENV_PUID}
      - PGID=${ENV_PGID}
      - TZ=${TIMEZONE}
      - PASSWORD=P@s5w04d #optional
      # - HASHED_PASSWORD=password #optional
      - SUDO_PASSWORD=P@s5w04d #optional
      - SUDO_PASSWORD_HASH=password #optional
      - PROXY_DOMAIN=code.kamovie.duckdns.org #optional
      - DEFAULT_WORKSPACE=/config/docker #optional
    volumes:
      - ${DOCKER_DIR}/admin_stack/code-server/config:/config
      - /home/mdwachira/docker:/config/docker
    networks:
      - proxy
    # ports:
    #   - '8187:8443'
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.code-server.rule=Host(`code.${DOMAIN}`)"
      - "traefik.http.routers.code-server.tls.certresolver=letsencrypt"
      - "traefik.http.services.code-server.loadbalancer.server.port=8443"
    restart: unless-stopped

  jfa_go:
    image: "docker.io/hrfee/jfa-go"
    restart: unless-stopped
    container_name: jfa_go
    hostname: jfa_go
    environment:
      - PUID=${ENV_PUID}
      - PGID=${ENV_PGID}
      - TZ=${TIMEZONE}
    networks:
      - streaming
      - proxy
    # ports:
    #   - '8189:8056'
    volumes:
      - ${DOCKER_DIR}/admin_stack/jfa_go:/data
      - /home/mdwachira/docker/streaming_stack/jellyfin/config:/jf
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.jfa-go.rule=Host(`auth.${DOMAIN}`)"
      - "traefik.http.routers.jfa-go.tls.certresolver=letsencrypt"
      - "traefik.http.services.jfa-go.loadbalancer.server.port=8056"

  ombi:
    image: "lscr.io/linuxserver/ombi"
    container_name: ombi
    hostname: ombi.local
    networks:
      - proxy
    environment:
      - PUID=${ENV_PUID}
      - PGID=${ENV_PGID}
      - TZ=${TIMEZONE}
    volumes:
      - ${DOCKER_DIR}/admin_stack/ombi:/config
    # ports:
    #   - '8182:3579'
    restart: unless-stopped
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.ombi.rule=Host(`${DOMAIN}`)"
      - "traefik.http.routers.ombi.tls.certresolver=letsencrypt"
      - "traefik.http.services.ombi.loadbalancer.server.port=3579"

  jellyseerr:
    image: "fallenbagel/jellyseerr:latest"
    container_name: jellyseerr
    environment:
      - LOG_LEVEL=debug
      - PUID=${ENV_PUID}
      - PGID=${ENV_PGID}
      - TZ=${TIMEZONE}
    networks:
      - streaming
      - proxy
    # ports:
    #   - '5055:5055'
    volumes:
      - ${DOCKER_DIR}/admin_stack/jellyseerr:/app/config
    restart: unless-stopped
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.jellyseerr.rule=Host(`see.${DOMAIN}`)"
      - "traefik.http.routers.jellyseerr.tls.certresolver=letsencrypt"
      - "traefik.http.services.jellyseerr.loadbalancer.server.port=5055"

  tautulli:
    image: "lscr.io/linuxserver/tautulli"
    container_name: tautulli
    hostname: tautulli.local
    networks:
      - proxy
    environment:
      - PUID=${ENV_PUID}
      - PGID=${ENV_PGID}
      - TZ=${TIMEZONE}
    volumes:
      - ${DOCKER_DIR}/admin_stack/tautulli:/config
      - "${DOCKER_DIR}/streaming_stack/plex/config/Library/Application Support/Plex Media Server/Logs:/plex_logs"
    # ports:
    #   - '8181:8181'
    restart: unless-stopped
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.tautulli.rule=Host(`tautulli.${DOMAIN}`)"
      - "traefik.http.routers.tautulli.tls.certresolver=letsencrypt"
      - "traefik.http.services.tautulli.loadbalancer.server.port=8181"

  overseerr:
    image: "lscr.io/linuxserver/overseerr"
    container_name: overseerr
    hostname: overseerr.local
    networks:
      - proxy
    environment:
      - PUID=${ENV_PUID}
      - PGID=${ENV_PGID}
      - TZ=${TIMEZONE}
    volumes:
      - ${DOCKER_DIR}/admin_stack/overserr:/config
    # ports:
    #  - '8183:5055'
    restart: unless-stopped
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.overseerr.rule=Host(`overseerr.${DOMAIN}`)"
      - "traefik.http.routers.overseerr.tls.certresolver=letsencrypt"
      - "traefik.http.services.overseerr.loadbalancer.server.port=5055"